# -*- coding: utf-8 -*-
"""1215654_Foram (1).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1l0V7yGaG5k8mBK3aCf_fRmn43JOVdS46
"""

import numpy as np
from collections import defaultdict, Counter
from sklearn.feature_extraction.text import CountVectorizer, TfidfTransformer
from typing import List


### Enter your Name ID in below variables. They must be strings.
ID = "1215654"
NAME = "Foram Patel"



class CustomBagOfWords:
    def __init__(self, data: List[List[str]]):
        #data is a list of lists which consists of words. For example = [["it", "consist", "of", "words"]]
        self.data = data
        #Map to store words to indexes in the vocab
        self.word_to_index = {}
        #Vocab stores all the unique words in the dataset.
        self.vocab = set()


    def _build_vocab(self):
        """Method to build vocabulary. Vocabulary is a list of unique words in the dataset and it is alphabetically sorted.
        Hint: Use the self.vocab to store unique words
        Note: Include only words whose length is >= 2
        """
        for data in self.data:
            for word in data:
                if len(word) >= 2 and word not in self.vocab:
                    self.vocab.add(word)

        #Implement your logic above this line
        #Do not modify the below line
        self.vocab = sorted(list(self.vocab))

    def create_index_map(self):
        """Method to map every word to its index in the vocabulary
        Hint: Iterate over the vocabulary and store them in word_to_index
        """
        #Implement the logic below this line
        for i, word in enumerate(self.vocab):
            self.word_to_index[word] = i

    def bow(self, input_sent: List[str]) -> np.ndarray:
        """Method which accepts input_sent of the form : ["is", "this", "a", "sent"].
        Task:
            Implement the bag of words approach for the above input.
            This function should return a vector of counts for the given inputs.
            The output shape of the vector should be 1 x len(self.vocab)
            The output should be a numpy array
            Example:
                length of vocabulary = 10
                input_sent = ["is", "this", "a", "sent"]
                The method should return a vector of shape 1 x 10.
        """
        vector = np.zeros(len(self.vocab), dtype = int)
        for word in input_sent:
            if word in self.word_to_index:
                vector[self.word_to_index[word]] += 1
        return vector

    def create_vector(self) -> np.ndarray:
        """Method iterates over the whole dataset and creates the bag of words vector of shape:  len(self.data) x len(self.vocab)"""
        #Do not modify this function
        self._build_vocab()
        self.create_index_map()
        vector = []
        for sent in self.data:
            sent_vector = self.bow(sent)
            vector.append(sent_vector)
        vector = np.array(vector)
        return vector


#Do not modify code below this. If this modified you will be given straight away 0.
class testApproach:
    def __init__(self):
        self.original_corpus = ["this is a document", "this is a processed document", "is this a document", "This is not a document"]
        self.corpus = self.process(self.original_corpus)
        self.sklearn_bow = CountVectorizer()
        self.custom_bow = CustomBagOfWords(self.corpus)

    def process(self, corpus):
        corpus = [x.lower() for x in corpus]
        return [x.split() for x in corpus]

    def testBOW(self):
        sklearn_output = self.sklearn_bow.fit_transform(self.original_corpus).toarray()
        custom_output = self.custom_bow.create_vector()

        try:
            is_correct = np.allclose(sklearn_output, custom_output)
        except:
            is_correct = False
        if is_correct is True:
            print(f"ID : {ID} | Name : {NAME} | ALL test cases passed.")
            print("===="*20)
        else:
            print(f"ID : {ID} | Name : {NAME} | ALL test cases Failed.")
            print("===="*20)

if __name__ == "__main__":
    tester = testApproach()
    tester.testBOW()